#!/usr/bin/env python
"""Convert Kismet netxml files to GoogleEarth KML files"""

import getopt
import gzip
import lxml
import lxml.etree
import lzma
import os
import os.path
import sys
import time
import xml.dom.minidom

__DEBUG = False

# illegal BSSID values
illegal_bssid = ["00:00:00:00:00:00"]

short_options = "Dhe:"
long_options = [
    "debug",
    "encryption=",
    "help",
]


def read_file(f):
    """
    Read data from file
    :param f: file name
    :return: content or None on error
    """
    fname, fext = os.path.splitext(f)
    if fext == ".xz":
        try:
            fd = lzma.open(f)
            content = fd.read().decode("utf-8")
            fd.close()
        except OSError:
            return None
    elif fext == ".gz":
        try:
            fd = gzip.open(f)
            content = fd.read().decode("utf-8")
            fd.close()
        except OSError:
            return None
    else:
        try:
            fd = open(f, "r")
            content = fd.read()
            fd.close()
        except OSError:
            return None

    return content


def parse_content(raw):
    """
    Parse XML content
    :param raw: XML content
    :return: parsed XML or None on error
    """
    try:
        result = lxml.etree.fromstring(raw.encode("utf-8"))
    except ValueError:
        return None
    except lxml.etree.Error:
        return None

    return result


def map_key_value_list(k, v):
    """
    Merge list of keys and list of values into dict
    :param k: key list
    :param v: value list
    :return: dict
    """
    result = {}
    for i in range(len(k)):
        key = k[i]
        value = v[i]
        result[key] = value

    return result


def get_encryption(e):
    """
    Get WLAN encryption
    :param e: list of announced encryption
    :return: encryption
    """
    if "None" in e:
        return "open"
    elif "WEP" in e or "WEP40" in e or "WEP104" in e:
        return "wep"
    elif "WPA+TKIP" in e and "WPA+PSK" in e:
        return "wpa"
    elif "WPA+AES-CCM" in e and "WPA+TKIP" not in e and "WPA+PSK" in e:
        return "wpa2"
    elif "WPA+PSK" not in e:
        return "wpa2enterprise"

    return "unknown"


def extract_data(pxml, pres=None):
    """
    Extract AP data from parsed XML
    :param pxml: parsed XML
    :param pres: result dict
    :return: dictionary or None on error
    """
    if pres is None:
        result = {}
    else:
        result = pres

    wireless = pxml.xpath("/detection-run/wireless-network")
    for w in wireless:
        bssidl = w.xpath("BSSID")
        if len(bssidl) == 0:
            if __DEBUG:
                sys.stderr.write("No BSSID found, skipping\n")
            continue

        if len(bssidl) > 1:
            sys.stderr.write("BUG: Data contains %d BSSID entries instead of just one\n" % (len(bssidl), ))
            sys.exit(99)

        bssid = bssidl[0].text
        if bssid in illegal_bssid:
            continue

        ssidl = w.xpath("SSID")
        if len(ssidl) == 0:
            if __DEBUG:
                sys.stderr.write("%s: No SSID found, skipping\n" % (bssid, ))
            continue

        else:
            essid = None
            # it is possible to have more than one SSID, e.g. for cloaked networks (one for the network and one for the
            # SSID from the client connection
            for ssid in ssidl:
                essidl = ssid.xpath("essid")
                if len(essidl) == 0:
                    if __DEBUG:
                        sys.stderr.write("%s: No ESSID found, skipping\n" % (bssid, ))
                    continue

                if len(essidl) > 1:
                    sys.stderr.write("BUG: %d ESSID entries found for BSSID %s instead of just one\n"
                                     % (len(essidl), bssid))
                    sys.exit(99)

                if essidl[0].text is not None:
                    essid = essidl[0].text

        gpsl = w.xpath("gps-info")
        if len(gpsl) == 0:
            if __DEBUG:
                sys.stderr.write("%s: No GPS data, skipping\n" % (bssid, ))
            continue

        if len(gpsl) > 1:
            sys.stderr.write("BUG: Found %d GPS information for BSSID %s instead of just one\n" % (len(gpsl), bssid))
            sys.exit(99)

        lat = float(w.xpath("gps-info/avg-lat")[0].text)
        lon = float(w.xpath("gps-info/avg-lon")[0].text)
        alt = float(w.xpath("gps-info/avg-alt")[0].text)

        enc = w.xpath("SSID/encryption")
        encryption = set()
        for i in enc:
            encryption.add(i.text)

        ssid_attr = map_key_value_list(ssid.keys(), ssid.values())
        if "last-time" not in ssid_attr:
            sys.stderr.write("BUG: No last-time found for SSID of BSSID %s\n" % (bssid, ))
            sys.exit(99)

        last_time_str = ssid_attr["last-time"]
        last_time = float(time.strftime("%s", time.strptime(last_time_str, "%a %b %d %H:%M:%S %Y")))

        if bssid not in result:
            if essid is None:
                if __DEBUG:
                    sys.stderr.write("%s: ESSID is None\n" % (bssid, ))
            else:
                result[bssid] = {
                    "ESSID": essid,
                    "time": last_time,
                    "position": [lat, lon, alt],
                    "encryption": encryption,
                }

                if __DEBUG:
                    sys.stderr.write("%s: ESSID: %s at (%f, %f, %f) stamp %f - %s\n"
                                     % (bssid, essid, lat, lon, alt, last_time, str(encryption)))
        else:
            if essid is not None:
                if result[bssid]["ESSID"] != essid:
                    if last_time > result[bssid]["time"]:
                        if __DEBUG:
                            sys.stderr.write("%s changed ESSID %s -> %s\n" % (bssid, result[bssid]["ESSID"], essid))

                        result[bssid]["ESSID"] = essid
                        result[bssid]["time"] = last_time

                pos = result[bssid]["position"]
                # XXX: although it is incorrect to calculate the average of lat/lon (they are WGS84 based
                # spherical coordinages!) it is sufficient for very small differences
                pos[0] = (pos[0] + lat) / 2.0
                pos[1] = (pos[1] + lon) / 2.0
                pos[2] = (pos[2] + alt) / 2.0

                result[bssid]["position"] = pos

    return result


def usage():
    """
    Show usage
    :return: None
    """
    print("""Usage: %s [-h|--help] [-e <enc>|--encryption=<enc>] <file> [<file> <file>]

    -e <enc>            Komma separated list of encryptions to include in output.
    --encryption=<enc>  Can be one of: Open, WEP, WPA, WPA2, WPA2Enterprise, Unknown

    -h                  This text.
    --help

""" % (sys.argv[0], ))


def make_kml(p, output_enc=None):
    """
    Create KML from parsed content
    :param p: parsed content
    :param output_enc: list of encryptions, default is None (all encryption types)
    :return: KML as string
    """
    result = """<?xml version="1.0" encoding="UTF-8"?>
    <kml xmlns="http://www.opengis.net/kml/2.2">
    <Document>
    <Style id="open">
        <IconStyle>
            <Icon>
                <href>icons/open.png</href>
            </Icon>
        </IconStyle>
    </Style>
    <Style id="wep">
        <IconStyle>
            <Icon>
                <href>icons/wep.png</href>
            </Icon>
        </IconStyle>
    </Style>
    <Style id="wpa">
        <IconStyle>
            <Icon>
                <href>icons/wpa.png</href>
            </Icon>
        </IconStyle>
    </Style>
    <Style id="wpa2">
        <IconStyle>
            <Icon>
                <href>icons/wpa2.png</href>
            </Icon>
        </IconStyle>
    </Style>
    <Style id="wpa2enterprise">
        <IconStyle>
            <Icon>
                <href>icons/wpa2enterprise.png</href>
            </Icon>
        </IconStyle>
    </Style>
    <Style id="unknown">
        <IconStyle>
            <Icon>
                <href>icons/unknown.png</href>
            </Icon>
        </IconStyle>
    </Style>
    """

    for bssid in p:
        enc = get_encryption(p[bssid]["encryption"])
        if output_enc is not None:
            if enc.lower() not in output_enc:
                continue

        placemark = xml.dom.minidom.Element("Placemark")
        name = xml.dom.minidom.Element("name")
        description = xml.dom.minidom.Element("description")
        point = xml.dom.minidom.Element("Point")
        coord = xml.dom.minidom.Element("coordinates")

        # name is SSID
        ntext = xml.dom.minidom.Text()
        ntext.data = p[bssid]["ESSID"]

        # coordinates
        ctext = xml.dom.minidom.Text()
        ctext.data = "%s,%s" % (p[bssid]["position"][1], p[bssid]["position"][0])

        # description
        dtext = xml.dom.minidom.Text()
        dtext.data = """<table style="width:100%%">
    <tr>
        <th><b>SSID</b></th>
        <th>%s</th>
    </tr>
    <tr>
        <td><b>BSSID</b></td>
        <td>%s</td>
    </tr>
    <tr>
        <td><b>Encryption</b></td>
        <td><b>%s</b></td>
    </tr>
    <tr>
        <td><b>Seen</b></td>
        <td>%s</td>
    </tr>
</table>""" % (p[bssid]["ESSID"], bssid, ", ".join(p[bssid]["encryption"]),
               time.strftime("%a, %d %b %Y %H:%M:%S %z", time.localtime(p[bssid]["time"])))

        style = xml.dom.minidom.Element("styleUrl")
        stext = xml.dom.minidom.Text()
        stext.data = enc

        coord.appendChild(ctext)
        description.appendChild(dtext)
        name.appendChild(ntext)
        point.appendChild(coord)
        style.appendChild(stext)

        placemark.appendChild(style)
        placemark.appendChild(name)
        placemark.appendChild(description)
        placemark.appendChild(point)

        result += placemark.toxml()
    result += """    </Document>
</kml>"""

    return result


if __name__ == "__main__":
    parsed = {}
    encryption = None

    try:
        options, arguments = getopt.getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError:
        sys.stderr.write("Error: Can't parse options\n")
        usage()
        sys.exit(1)

    for opt, arg in options:
        if opt in ("-h", "--help"):
            usage()
            sys.exit(0)
        elif opt in ("-e", "--encryption"):
            encryption = arg.lower().split(",")
        elif opt in ("-D", "--debug"):
            __DEBUG = True
        else:
            sys.stderr.write("Error: Invalid argument %s\n" % (opt, ))
            usage()
            sys.exit(1)

    for infile in arguments:
        raw_xml = read_file(infile)
        if raw_xml is None:
            sys.stderr.write("Error: Can't read %s\n" % (infile, ))
            sys.exit(2)

        parsed_xml = parse_content(raw_xml)
        parsed = extract_data(parsed_xml, parsed)

    bssids = list(parsed.keys())
    bssids.sort()
    print(make_kml(parsed, output_enc=encryption))
    sys.exit(0)
