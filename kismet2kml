#!/usr/bin/env python
"""Convert Kismet netxml files to GoogleEarth KML files"""

import gzip
import lxml
import lxml.etree
import lzma
import os
import os.path
import sys
import time

__DEBUG = False

# illegal BSSID values
illegal_bssid = set("00:00:00:00:00:00")


def read_file(f):
    """
    Read data from file
    :param f: file name
    :return: content or None on error
    """
    fname, fext = os.path.splitext(f)
    if fext == ".xz":
        try:
            fd = lzma.open(f)
            content = fd.read().decode("utf-8")
            fd.close()
        except OSError:
            return None
    elif fext == ".gz":
        try:
            fd = gzip.open(f)
            content = fd.read().decode("utf-8")
            fd.close()
        except OSError:
            return None
    else:
        try:
            fd = open(f, "r")
            content = fd.read()
            fd.close()
        except OSError:
            return None

    return content


def parse_content(raw):
    """
    Parse XML content
    :param raw: XML content
    :return: parsed XML or None on error
    """
    try:
        result = lxml.etree.fromstring(raw.encode("utf-8"))
    except ValueError:
        return None
    except lxml.etree.Error:
        return None

    return result


def map_key_value_list(k, v):
    """
    Merge list of keys and list of values into dict
    :param k: key list
    :param v: value list
    :return: dict
    """
    result = {}
    for i in range(len(k)):
        key = k[i]
        value = v[i]
        result[key] = value

    return result


def extract_data(xml, pres=None):
    """
    Extract AP data from parsed XML
    :param xml: parsed XML
    :param pres: result dict
    :return: dictionary or None on error
    """
    if pres is None:
        result = {}
    else:
        result = pres

    wireless = xml.xpath("/detection-run/wireless-network")
    for w in wireless:
        bssidl = w.xpath("BSSID")
        if len(bssidl) == 0:
            if __DEBUG:
                print("No BSSID found, skipping")
            continue

        if len(bssidl) > 1:
            sys.stderr.write("BUG: Data contains %d BSSID entries instead of just one\n" % (len(bssidl), ))
            sys.exit(99)

        bssid = bssidl[0].text
        ssidl = w.xpath("SSID")
        if len(ssidl) == 0:
            if __DEBUG:
                print("%s: No SSID found, skipping" % (bssid, ))
            continue

        else:
            essid = None
            # it is possible to have more than one SSID, e.g. for cloaked networks (one for the network and one for the
            # SSID from the client connection
            for ssid in ssidl:
                essidl = ssid.xpath("essid")
                if len(essidl) == 0:
                    if __DEBUG:
                        print("%s: No ESSID found, skipping" % (bssid, ))
                    continue

                if len(essidl) > 1:
                    sys.stderr.write("BUG: %d ESSID entries found for BSSID %s instead of just one\n"
                                     % (len(essidl), bssid))
                    sys.exit(99)

                if essidl[0].text is not None:
                    essid = essidl[0].text

        gpsl = w.xpath("gps-info")
        if len(gpsl) == 0:
            if __DEBUG:
                print("%s: No GPS data, skipping" % (bssid, ))
            continue

        if len(gpsl) > 1:
            sys.stderr.write("BUG: Found %d GPS information for BSSID %s instead of just one\n" % (len(gpsl), bssid))
            sys.exit(99)

        lat = float(w.xpath("gps-info/avg-lat")[0].text)
        lon = float(w.xpath("gps-info/avg-lon")[0].text)
        alt = float(w.xpath("gps-info/avg-alt")[0].text)

        enc = w.xpath("SSID/encryption")
        encryption = set()
        for i in enc:
            encryption.add(i.text)

        ssid_attr = map_key_value_list(ssid.keys(), ssid.values())
        if "last-time" not in ssid_attr:
            sys.stderr.write("BUG: No last-time found for SSID of BSSID %s\n" % (bssid, ))
            sys.exit(99)

        last_time_str = ssid_attr["last-time"]
        last_time = float(time.strftime("%s", time.strptime(last_time_str, "%a %b %d %H:%M:%S %Y")))

        if bssid not in result:
            if essid is None:
                if __DEBUG:
                    print("%s: ESSID is None" % (bssid, ))
            else:
                result[bssid] = {
                    "ESSID": essid,
                    "time": last_time,
                    "position": [lat, lon, alt],
                    "encryption": encryption,
                }

                if __DEBUG:
                    print("%s: ESSID: %s at (%f, %f, %f) stamp %f - %s"
                          % (bssid, essid, lat, lon, alt, last_time, str(encryption)))
        else:
            if essid is not None:
                if result[bssid]["ESSID"] != essid:
                    if last_time > result[bssid]["time"]:
                        if __DEBUG:
                            print("%s changed ESSID %s -> %s" % (bssid, result[bssid]["ESSID"], essid))
                        result[bssid]["ESSID"] = essid
                        result[bssid]["time"] = last_time

                pos = result[bssid]["position"]
                # XXX: although it is incorrect to calculate the average of lat/lon (they are WGS84 based
                # spherical coordinages!) it is sufficient for very small differences
                pos[0] = (pos[0] + lat) / 2.0
                pos[1] = (pos[1] + lon) / 2.0
                pos[2] = (pos[2] + alt) / 2.0

                result[bssid]["position"] = pos

    return result


def usage():
    """
    Show usage
    :return: None
    """
    print("""Usage: %s <file> [<file> <file>]""" % (sys.argv[0], ))


if __name__ == "__main__":
    parsed = {}

    if len(sys.argv) == 1:
        usage()
        sys.exit(1)

    for infile in sys.argv[1:]:
        raw_xml = read_file(infile)
        if raw_xml is None:
            sys.stderr.write("Error: Can't read %s\n" % (infile, ))
            sys.exit(2)

        parsed_xml = parse_content(raw_xml)
        parsed = extract_data(parsed_xml, parsed)

    # remove illegal BSSIDs
    for ill in illegal_bssid:
        if ill in parsed:
            parsed.pop(ill)

    bssids = list(parsed.keys())
    bssids.sort()
    for bss in bssids:
        print("%s: %s" % (bss, str(parsed[bss])))

#    print(parsed)
    sys.exit(0)
